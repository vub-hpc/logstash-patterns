input {
    stdin { } # logstash stops when input is closed
}

filter
{
    grok {
        add_field => {
            "received_at" => "%{@timestamp}"
            "received_from" => "%{@source_host}"
        }

        break_on_match => true
        named_captures_only => true
        patterns_dir => [ "/tmp/logpatterns-groktest" ]

        match => {
            "message" => [
                "%{RSYSLOGCUSTOMHEADER}%{PIXIU_ALARM}",
                "%{RSYSLOGCUSTOMHEADER}%{PIXIU_BASH}",
                "%{RSYSLOGCUSTOMHEADER}%{PIXIU_NGINX}",
                "%{RSYSLOGCUSTOMHEADER}%{PIXIU_TOMCAT}",
                "%{RSYSLOGPREFIX}%{PIXIU_APACHE}",
                "%{RSYSLOGPREFIX}%{SU_MSG}",
                "%{RSYSLOGPREFIX}%{SUDO_MSG}",
                "%{RSYSLOGPREFIX}%{REFRAME_MSG}",
                "%{RSYSLOGPREFIX}%{BASH_MSG}",
                "%{RSYSLOGPREFIX}%{FAIL2BAN_MSG}",
                "%{RSYSLOGPREFIX}%{SINGULARITY_MSG}",
                "%{RSYSLOGPREFIX}%{DHCPD_MSG}",
                "%{RSYSLOGPREFIX}%{SSH_MSG}",
                "%{RSYSLOGPREFIX}%{MODULECMD_MSG}",
                "%{RSYSLOGPREFIX}%{LMOD_MSG}",
                "%{RSYSLOGPREFIX}%{NFS_MSG}",
                "%{RSYSLOGPREFIX}%{CEPH_MSG}",
                "%{RSYSLOGPREFIX}%{OPENNEBULA_MSG}",
                "%{RSYSLOGPREFIX}%{JUBE_MSG}",
                "%{RSYSLOGPREFIX}%{SHOREWALL_MSG}",
                "%{RSYSLOGPREFIX}%{QUATTOR_MSG}",
                "%{RSYSLOGPREFIX}%{SNOOPY_MSG}",
                "%{RSYSLOGPREFIX}%{APACHE_MSG}",
                # Last resort, this should be one to last
                "%{RSYSLOGPREFIX}%{KEYVALUE_MSG}",
                # RSYSLOGCUSTOM always last (and no PREFIX)!
                "%{RSYSLOGCUSTOM}"
            ]
        }
        id => "main_grok"
    }

    kv {
        source => "KEY_EQ_VALUEDATA"
    }

    date {
        match => [ "syslog_timestamp", "yyyy-MM-dd'T'HH:mm:ss.SSSSSSZZ", "yyyy-MM-dd'T'HH:mm:ssZZ", "yyyy-MM-dd HH:mm:ss.SSSSSS", "MMM d HH:mm:ss", "MMM  d HH:mm:ss" ]
    }

    if ("exclude_tags" not in [tags]) {
        mutate {
            replace => {
                "@source_host" => "%{syslog_hostname}"
            }
        }
    }

    if ([syslog_message]) {
        mutate {
            replace => {
                "@message" => "%{syslog_message}"
            }
        }
    }

    if ("_grokparsefailure" not in [tags]) {
        mutate {
            remove_field => [ "syslog_hostname", "syslog_message", "syslog_timestamp", "KEY_EQ_VALUEDATA", "int" ]
            convert => { "success" => "boolean" }

            # we need MB converted to MiB for bytes2human
            gsub => [ "used_space", "([0-9]+[kKmMgGtTpP])[bB]", "\1ib",
                      "quota_space_limit", "([0-9]+[kKmMgGtTpP])[bB]", "\1ib" ]
        }
    }

    bytes2human {
        convert => {
            "volumedata" => "bytes"
            "volumeused" => "bytes"
            "volumeavail" => "bytes"
            "volumetotal" => "bytes"
            "objrecovthr" => "bytes"
            "actwrite" => "bytes"
            "actread" => "bytes"
            "used_space" => "bytes"
            "quota_space_limit" => "bytes"
        }
    }

    mutate {
        convert => {
            "volumedata" => "integer"
            "volumeused" => "integer"
            "volumeavail" => "integer"
            "volumetotal" => "integer"
            "objrecovthr" => "integer"
            "actwrite" => "integer"
            "actread" => "integer"
            "dtree_id" => "integer"
            "namespace_id" => "integer"
            "account_id" => "integer"
            "used_files" => "integer"
            "used_space" => "integer"
            "quota_files_limit" => "integer"
            "quota_space_limit" => "integer"
            "quota_used" => "integer"
            "quota_limit" => "integer"
            "pid" => "integer"
            "bash_pid" => "integer"
            "uid" => "integer"
        }
    }
}

output {
  stdout { codec => json_lines } # add newline per output
}
